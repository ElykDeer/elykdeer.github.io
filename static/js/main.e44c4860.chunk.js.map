{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["commands","echo","description","usage","fn","Array","from","arguments","join","App","Grommet","themeMode","full","Stack","anchor","fill","contentStyle","style","minHeight","minWidth","borderRadius","promptLabel","Box","border","color","size","side","pad","alignContent","Text","textAlign","margin","alignSelf","direction","gap","Button","icon","Github","href","plain","focusIndicator","ChatOption","Twitter","MailOption","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAKMA,EAAW,CACfC,KAAM,CACJC,YAAa,wBACbC,MAAO,gBACPC,GAAI,WAEF,MAAM,GAAN,OAAUC,MAAMC,KAAKC,WAAWC,KAAK,SAKtBC,E,uKAIjB,OACE,kBAACC,EAAA,EAAD,CAASC,UAAU,OAAOC,MAAI,GAC5B,kBAACC,EAAA,EAAD,CAAOC,OAAO,SAASC,MAAI,GACzB,kBAAC,IAAD,CACEC,aAAc,CAAE,aAAc,SAAU,YAAa,cACrDC,MAAO,CAAEC,UAAW,OAAQC,SAAU,OAAQC,aAAc,KAC5DpB,SAAUA,EACVqB,YAAa,OAEf,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAAEC,MAAO,QAASC,KAAM,QAASR,MAAO,SAAUS,KAAM,cAAgBC,IAAI,SAASC,aAAa,UAC7G,kBAACC,EAAA,EAAD,CAAMJ,KAAK,UAAUD,MAAM,WAAWM,UAAU,SAASC,OAAO,SAAhE,eAGA,kBAACF,EAAA,EAAD,CAAMJ,KAAK,UAAUD,MAAM,WAAWM,UAAU,SAASC,OAAO,SAAhE,qBAGA,kBAACF,EAAA,EAAD,CAAMJ,KAAK,UAAUD,MAAM,WAAWM,UAAU,SAASC,OAAO,UAGhE,kBAACT,EAAA,EAAD,CAAKU,UAAU,SAASC,UAAU,MAAMC,IAAI,UAC1C,kBAACC,EAAA,EAAD,CAAQC,KAAM,kBAACC,EAAA,EAAD,CAAQZ,KAAK,UAAYa,KAAK,+BAA+BC,OAAO,EAAMC,gBAAgB,IACxG,kBAACL,EAAA,EAAD,CAAQC,KAAM,kBAACK,EAAA,EAAD,CAAYhB,KAAK,UAAYa,KAAK,qDAAqDC,OAAO,EAAMC,gBAAgB,IAClI,kBAACL,EAAA,EAAD,CAAQC,KAAM,kBAACM,EAAA,EAAD,CAASjB,KAAK,UAAYa,KAAK,+BAA+BC,OAAO,EAAMC,gBAAgB,IACzG,kBAACL,EAAA,EAAD,CAAQC,KAAM,kBAACO,EAAA,EAAD,CAAYlB,KAAK,UAAYa,KAAK,+BAA+BC,OAAO,EAAMC,gBAAgB,Y,GA3BzFI,aCJbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e44c4860.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Grommet, Stack, Text, Box, Button } from 'grommet';\nimport { Github, ChatOption, Twitter, MailOption } from 'grommet-icons';\nimport Terminal from 'react-console-emulator'\n\nconst commands = {\n  echo: {\n    description: 'Echo a passed string.',\n    usage: 'echo <string>',\n    fn: function ()\n    {\n      return `${Array.from(arguments).join(' ')}`\n    }\n  }\n}\n\nexport default class App extends Component\n{\n  render ()\n  {\n    return (\n      <Grommet themeMode=\"dark\" full>\n        <Stack anchor=\"center\" fill>\n          <Terminal\n            contentStyle={{ 'overflow-x': 'hidden', 'word-wrap': 'break-word' }}\n            style={{ minHeight: '100%', minWidth: '100%', borderRadius: '0' }}\n            commands={commands}\n            promptLabel={'> '}\n          />\n          <Box border={{ color: 'brand', size: 'large', style: 'double', side: 'horizontal' }} pad=\"medium\" alignContent='center'>\n            <Text size='xxlarge' color='darkgrey' textAlign='center' margin='small'>\n              Kyle Martin\n            </Text>\n            <Text size='xxlarge' color='darkgrey' textAlign='center' margin='small'>\n              Computer Engineer\n            </Text>\n            <Text size='xxlarge' color='darkgrey' textAlign='center' margin='small'>\n            </Text>\n\n            <Box alignSelf='center' direction='row' gap='medium'>\n              <Button icon={<Github size='large' />} href='https://github.com/KyleMiles' plain={true} focusIndicator={false} />\n              <Button icon={<ChatOption size='large' />} href='https://app.element.io/#/user/@elykdeer:elyk.rocks' plain={true} focusIndicator={false} />\n              <Button icon={<Twitter size='large' />} href='https://twitter.com/elykdeer' plain={true} focusIndicator={false} />\n              <Button icon={<MailOption size='large' />} href='mailto:martinrkyle@gmail.com' plain={true} focusIndicator={false} />\n            </Box>\n          </Box>\n        </Stack>\n\n      </Grommet >\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}